#include <stdio.h>
#include <stdlib.h>

float** alocaMatrice(int linii, int coloane) {
    float** matrice = (float**)malloc(linii * sizeof(float*));
    for (int i = 0; i < linii; i++) {
        matrice[i] = (float*)malloc(coloane * sizeof(float));
    }
    return matrice;
}

void elibereazaMatrice(float** matrice, int linii) {
    for (int i = 0; i < linii; i++) {
        free(matrice[i]);
    }
    free(matrice);
}

void afiseazaMatrice(float** matrice, int linii, int coloane) {
    for (int i = 0; i < linii; i++) {
        for (int j = 0; j < coloane; j++) {
            printf("%f\t", matrice[i][j]);
        }
        printf("\n");
    }
}

void interschimbaLinii(float** matrice, int linie1, int linie2, int coloane) {
    for (int j = 0; j < coloane; j++) {
        float temp = matrice[linie1][j];
        matrice[linie1][j] = matrice[linie2][j];
        matrice[linie2][j] = temp;
    }
}

void scaleazaLinie(float** matrice, int linie, int coloane, float scalar) {
    for (int j = 0; j < coloane; j++) {
        matrice[linie][j] *= scalar;
    }
}

void eliminaElement(float** matrice, int linii, int coloane, int liniePivot, int coloanaPivot) {
    for (int i = 0; i < linii; i++) {
        if (i != liniePivot) {
            float factor = matrice[i][coloanaPivot] / matrice[liniePivot][coloanaPivot];
            for (int j = 0; j < coloane; j++) {
                matrice[i][j] -= factor * matrice[liniePivot][j];
            }
        }
    }
}

int calculeazaInversa(float** matrice, int dimensiune) {
    for (int j = 0; j < dimensiune; j++) {
        int liniePivot = -1;
        for (int i = j; i < dimensiune; i++) {
            if (matrice[i][j] != 0.0) {
                liniePivot = i;
                break;
            }
        }

        if (liniePivot == -1) {
            printf("Matricea nu este inversabila.\n");
            return 0;
        }

        interschimbaLinii(matrice, j, liniePivot, dimensiune);
        float pivot = matrice[j][j];
        scaleazaLinie(matrice, j, dimensiune, 1.0 / pivot);
        eliminaElement(matrice, dimensiune, dimensiune, j, j);
    }

    return 1; // Succes
}

int main() {
    int dimensiune;
    printf("Introduceti dimensiunea matricei patratice: ");
    scanf("%d", &dimensiune);

    float** matrice = alocaMatrice(dimensiune, dimensiune);

    printf("Introduceti elementele matricei:\n");
    for (int i = 0; i < dimensiune; i++) {
        for (int j = 0; j < dimensiune; j++) {
            printf("Elementul [%d][%d]: ", i+1, j+1);
            scanf("%f", &matrice[i][j]);
        }
    }

    printf("\nMatricea introdusa este:\n");
    afiseazaMatrice(matrice, dimensiune, dimensiune);

    if (calculeazaInversa(matrice, dimensiune)) {
        printf("\nMatricea inversa este:\n");
        afiseazaMatrice(matrice, dimensiune, dimensiune);
    }

    elibereazaMatrice(matrice, dimensiune);

    return 0;
}
